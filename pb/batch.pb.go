// Code generated by protoc-gen-go.
// source: pb/batch.proto
// DO NOT EDIT!

/*
Package batch is a generated protocol buffer package.

It is generated from these files:
	pb/batch.proto

It has these top-level messages:
	Query
	Response
*/
package batch

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Query struct {
	Selector []byte `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Document []byte `protobuf:"bytes,2,opt,name=document,proto3" json:"document,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Query) GetSelector() []byte {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *Query) GetDocument() []byte {
	if m != nil {
		return m.Document
	}
	return nil
}

type Response struct {
	Affected int32  `protobuf:"varint,1,opt,name=affected" json:"affected,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetAffected() int32 {
	if m != nil {
		return m.Affected
	}
	return 0
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Query)(nil), "Query")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BatchService service

type BatchServiceClient interface {
	Create(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Query, opts ...grpc.CallOption) (BatchService_GetClient, error)
}

type batchServiceClient struct {
	cc *grpc.ClientConn
}

func NewBatchServiceClient(cc *grpc.ClientConn) BatchServiceClient {
	return &batchServiceClient{cc}
}

func (c *batchServiceClient) Create(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/BatchService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchServiceClient) Update(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/BatchService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchServiceClient) Delete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/BatchService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchServiceClient) Get(ctx context.Context, in *Query, opts ...grpc.CallOption) (BatchService_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BatchService_serviceDesc.Streams[0], c.cc, "/BatchService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &batchServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BatchService_GetClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type batchServiceGetClient struct {
	grpc.ClientStream
}

func (x *batchServiceGetClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BatchService service

type BatchServiceServer interface {
	Create(context.Context, *Query) (*Response, error)
	Update(context.Context, *Query) (*Response, error)
	Delete(context.Context, *Query) (*Response, error)
	Get(*Query, BatchService_GetServer) error
}

func RegisterBatchServiceServer(s *grpc.Server, srv BatchServiceServer) {
	s.RegisterService(&_BatchService_serviceDesc, srv)
}

func _BatchService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatchService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServiceServer).Create(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatchService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServiceServer).Update(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatchService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchServiceServer).Delete(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BatchServiceServer).Get(m, &batchServiceGetServer{stream})
}

type BatchService_GetServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type batchServiceGetServer struct {
	grpc.ServerStream
}

func (x *batchServiceGetServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _BatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BatchService",
	HandlerType: (*BatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BatchService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BatchService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BatchService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _BatchService_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/batch.proto",
}

func init() { proto.RegisterFile("pb/batch.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x48, 0xd2, 0x4f,
	0x4a, 0x2c, 0x49, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xb2, 0xe7, 0x62, 0x0d, 0x2c,
	0x4d, 0x2d, 0xaa, 0x14, 0x92, 0xe2, 0xe2, 0x28, 0x4e, 0xcd, 0x49, 0x4d, 0x2e, 0xc9, 0x2f, 0x92,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0xf3, 0x41, 0x72, 0x29, 0xf9, 0xc9, 0xa5, 0xb9, 0xa9,
	0x79, 0x25, 0x12, 0x4c, 0x10, 0x39, 0x18, 0x5f, 0xc9, 0x82, 0x8b, 0x23, 0x28, 0xb5, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x15, 0xa4, 0x2e, 0x31, 0x2d, 0x2d, 0x35, 0xb9, 0x24, 0x35, 0x05, 0x6c, 0x06,
	0x6b, 0x10, 0x9c, 0x2f, 0x24, 0xc0, 0xc5, 0x9c, 0x5b, 0x9c, 0x0e, 0xd6, 0xce, 0x19, 0x04, 0x62,
	0x1a, 0x75, 0x32, 0x72, 0xf1, 0x38, 0x81, 0x9c, 0x12, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a,
	0x24, 0xcb, 0xc5, 0xe6, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x2a, 0xc4, 0xa6, 0x07, 0x76, 0x94, 0x14,
	0xa7, 0x1e, 0xcc, 0x6c, 0x25, 0x06, 0x90, 0x74, 0x68, 0x41, 0x0a, 0x3e, 0x69, 0x97, 0xd4, 0x9c,
	0x54, 0x5c, 0xd2, 0x32, 0x5c, 0xcc, 0xee, 0xa9, 0x25, 0x58, 0xe5, 0x0c, 0x18, 0x93, 0xd8, 0xc0,
	0xa1, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x4a, 0xf4, 0xdc, 0x1f, 0x01, 0x00, 0x00,
}
